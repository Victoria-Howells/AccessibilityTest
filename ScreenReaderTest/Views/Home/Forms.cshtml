
@{
    ViewData["Title"] = "Forms";
}

<h1>Forms</h1>

@using (Html.BeginForm("FormSuccess", "Home", FormMethod.Post, new { id = "badForm", onsubmit = "return validate(event)" })) {
    <input type="text" name="fname" placeholder="Enter your first name" />
    <input type="text" name="sname" placeholder="Enter your surname" />
    <input type="email" name="email" placeholder="Enter your email address" />
    <input type="submit" value="Submit" />
}

<br/>


@using (Html.BeginForm("Forms", "Home", FormMethod.Post, new { id = "goodForm", onsubmit = "return betterValidation(event)" })) {
    @Html.AntiForgeryToken()
    
    <section id="errors" aria-live="assertive" tabindex="-1"></section>
    <fieldset>
        <legend>Details</legend>
        <label for="fullname" aria-live="assertive" class="required">
            Name (Required):
            <span class="error-message hidden">Name cannot be empty</span>
        </label>
        <input id="fullname" name="fullname" type="text" required autocomplete="name" />

        <label for="email" aria-live="assertive" class="required">
            Email (Required):
            <span class="error-message hidden">Email cannot be empty</span>
        </label>
        <input id="email" name="email" type="email" required autocomplete="email" />

        <label for="mobile">
            Mobile:
        </label>
        <input id="mobile" name="mobile" type="number" />
    </fieldset>
    <fieldset>
        <legend>Phone Number Type</legend>

        <label>
            <input type="radio" name="phone-type" value="home"> Home
        </label>

        <label>
            <input type="radio" name="phone-type" value="work"> Work
        </label>

        <label>
            <input type="radio" name="phone-type" value="cell"> Cell
        </label>
    </fieldset>

    <button type="submit">Submit</button>
}

<h2>Advice Followed</h2>
<ul>
    <li>Users are notified of required fields in the label</li>
    <li>Labels are used rather than placeholders</li>
    <li>Added required attributes</li>
    <li>Added fieldsets and legend to group data</li>
    <li>On Page validation messages</li>

</ul>

<h2>WCAG Guidelines & Acceptance Criteria Satisfied</h2>
<table>
    <caption>WCAG Criteria</caption>
    <thead>
        <tr>
            <th scope="col">Principle</th>
            <th scope="col">Guideline</th>
            <th scope="col">Success Criterion</th>
            <th scope="col">Details</th>
            <th scope="col">Criterion Number</th>
            <th scope="col">Level</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Perceivable</td>
            <td>Adaptable</td>
            <td>Info and Relationships</td>
            <td>
                Information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text.
            </td>
            <td>1.3.1</td>
            <td>A</td>
        </tr>
        <tr>
            <td>Operable</td>
            <td>Navigable</td>
            <td>Headings and Labels</td>
            <td>
                Headings and labels describe topic or purpose.
            </td>
            <td>2.4.6</td>
            <td>AA</td>
        </tr>
        <tr>
            <td>Understandable</td>
            <td>Input Assistance</td>
            <td>Labels or Instructions</td>
            <td>
                Labels or instructions are provided when content requires user input.
            </td>
            <td>3.3.2</td>
            <td>A</td>
        </tr>
        <tr>
            <td>Robust</td>
            <td>Compatible</td>
            <td>Name, Role, Value</td>
            <td>
                For all user interface components (including but not limited to: form elements, links and components generated by scripts), the name and role can be programmatically determined; states, properties, and values that can be set by the user can be programmatically set; and notification of changes to these items is available to user agents, including assistive technologies.
            </td>
            <td>4.1.2</td>
            <td>A</td>
        </tr>
        <tr>
            <td>Operable</td>
            <td>Input Modalities</td>
            <td>Label in Name</td>
            <td>
                For user interface components with labels that include text or images of text, the name contains the text that is presented visually.
            </td>
            <td>2.5.3</td>
            <td>A</td>
        </tr>
        <tr>
            <td>Perceivable</td>
            <td>Adaptable</td>
            <td>Sensory Characteristics</td>
            <td>
                Instructions provided for understanding and operating content do not rely solely on sensory characteristics of components such as shape, color, size, visual location, orientation, or sound.
            </td>
            <td>1.3.3</td>
            <td>A</td>
        </tr>
        <tr>
            <td>Operable</td>
            <td>Keyboard Accessible</td>
            <td>Keyboard</td>
            <td>
                All functionality of the content is operable through a keyboard interface without requiring specific timings for individual keystrokes, except where the underlying function requires input that depends on the path of the user's movement and not just the endpoints.
            </td>
            <td>2.1.1</td>
            <td>A</td>
        </tr>
        <tr>
            <td>Operable</td>
            <td>Navigable</td>
            <td>Focus Visible</td>
            <td>
                Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible.
            </td>
            <td>2.4.7</td>
            <td>AA</td>
        </tr>
        <tr>
            <td>Perceivable</td>
            <td>Distinguishable</td>
            <td>Use of Colour</td>
            <td>
                Colour is not used as the only visual means of conveying information, indicating an action, prompting a response, or distinguishing a visual element.
            </td>
            <td>2.4.1</td>
            <td>A</td>
        </tr>
        <tr>
            <td>Understandable</td>
            <td>Input Assistance</td>
            <td>Error Identification</td>
            <td>
                If an input error is automatically detected, the item that is in error is identified and the error is described to the user in text.
            </td>
            <td>3.3.1</td>
            <td>A</td>
        </tr>
        <tr>
            <td>Understandable</td>
            <td>Input Assistance</td>
            <td>Error Suggestion</td>
            <td>
                If an input error is automatically detected and suggestions for correction are known, then the suggestions are provided to the user, unless it would jeopardize the security or purpose of the content.
            </td>
            <td>3.3.3</td>
            <td>AA</td>
        </tr>
    </tbody>
    <tfoot>

    </tfoot>
</table>


@*@section Scripts {
    <script src="../wwwroot/js/validation.js"></script>
}*@


<script>
    function validate(e) {
        e.preventDefault();
        var firstName = document.forms["badForm"]["fname"].value;
        var surName = document.forms["badForm"]["sname"].value;
        var emailAddress = document.forms["badForm"]["email"].value;

        var valid = true;

        if (firstName === "") {
            document.forms["badForm"]["fname"].classList.add("invalid");
            //document.forms["badForm"].event.preventDefault();
            valid = false;
        }

        if (surName === "") {
            document.forms["badForm"]["sname"].classList.add("invalid");
            //document.forms["badForm"].event.preventDefault();
            valid = false;
        }

        if (emailAddress === "") {
            document.forms["badForm"]["email"].classList.add("invalid");
            //document.forms["badForm"].event.preventDefault();
            valid = false;
        }

        return valid;
    }

    function betterValidation(e) {

    }
</script>

